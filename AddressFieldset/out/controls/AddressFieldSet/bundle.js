/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./AddressFieldSet/index.ts":
/*!**********************************!*\
  !*** ./AddressFieldSet/index.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.AddressFieldSet = void 0;\nvar AddressFieldSet = /** @class */function () {\n  function AddressFieldSet() {}\n  /**\r\n   * Used to initialize the control instance. Controls can kick off remote server calls and other initialization actions here.\r\n   * Data-set values are not initialized here, use updateView.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to property names defined in the manifest, as well as utility functions.\r\n   * @param notifyOutputChanged A callback method to alert the framework that the control has new outputs ready to be retrieved asynchronously.\r\n   * @param state A piece of data that persists in one session for a single user. Can be set at any point in a controls life cycle by calling 'setControlState' in the Mode interface.\r\n   * @param container If a control is marked control-type='standard', it will receive an empty div element within which it can render its content.\r\n   */\n  AddressFieldSet.prototype.init = function (context, notifyOutputChanged, state, container) {\n    this.AddressContext = context;\n    this.AddressOutputChanged = notifyOutputChanged;\n    var myAddressTitle = context.parameters.FieldTitle.raw || \"\";\n    this.fieldTitle = myAddressTitle;\n    this.buildingName = context.parameters.BuildingName.raw || \"\";\n    this.addressLine1 = context.parameters.address_line_1.raw || \"\";\n    this.addressLine2 = context.parameters.address_line_2.raw || \"\";\n    this.addressTown = context.parameters.town.raw || \"\";\n    this.addressCounty = context.parameters.county.raw || \"\";\n    this.addressCountry = context.parameters.country.raw || \"\";\n    this.addressPostCode = context.parameters.postcode.raw || \"\";\n    this._container = container;\n    this._container.className = \"govuk-form-group\";\n    this.myContainer();\n    this._container.appendChild(this.fieldSet);\n  };\n  AddressFieldSet.prototype.myContainer = function () {\n    var buildingNameLabel = this.AddressLabel(\"Building Name\", \"address-line-1\");\n    this.buildingNameHTML = this.AddressEntry(this.buildingNameHTML, [\"govuk-input\"], \"address-line-1\", \"addressLine1\", this.buildingName);\n    var buildingNameDiv = this.AdressDiv(buildingNameLabel, this.buildingNameHTML);\n    this.buildingNameDiv = buildingNameDiv;\n    this.buildingNameLabel = buildingNameLabel;\n    var adressline1Label = this.AddressLabel(\"Adress line 1\", \"address-line-1\");\n    this.addressline1HTML = this.AddressEntry(this.addressline1HTML, [\"govuk-input\"], \"address-line-1\", \"addressLine1\", this.addressLine1);\n    var adressline1Div = this.AdressDiv(adressline1Label, this.addressline1HTML);\n    var adressLine2Label = this.AddressLabel(\"Adress line 2\", \"address-line-2\");\n    this.addressLine2HTML = this.AddressEntry(this.addressLine2HTML, [\"govuk-input\"], \"address-line-2\", \"addressLine2\", this.addressLine2);\n    var adressline2Div = this.AdressDiv(adressLine2Label, this.addressLine2HTML);\n    var townLabel = this.AddressLabel(\"Town / city\", \"address-town\");\n    this.townHTML = this.AddressEntry(this.townHTML, [\"govuk-input\", \"govuk-!-width-two-thirds\"], \"address-town\", \"addressTown\", this.addressTown, \"address-level2\");\n    var townDiv = this.AdressDiv(townLabel, this.townHTML);\n    var countyLabel = this.AddressLabel(\"County\", \"address-town\");\n    this.countyHTML = this.AddressEntry(this.countyHTML, [\"govuk-input\", \"govuk-!-width-two-thirds\"], \"address-town\", \"addressTown\", this.addressCounty);\n    var countyDiv = this.AdressDiv(countyLabel, this.countyHTML);\n    var countryLabel = this.AddressLabel(\"Country\", \"address-town\");\n    this.countryHTML = this.AddressEntry(this.countryHTML, [\"govuk-input\", \"govuk-!-width-two-thirds\"], \"address-town\", \"addressTown\", this.addressCountry);\n    var countryDiv = this.AdressDiv(countryLabel, this.countryHTML);\n    var postCodeLabel = this.AddressLabel(\"PostCode\", \"address-postcode\");\n    this.postCodeHTML = this.AddressEntry(this.postCodeHTML, [\"govuk-input\", \"govuk-input--width-10\"], \"address-postcode\", \"addressPostcode\", this.addressPostCode);\n    var postCodeDiv = this.AdressDiv(postCodeLabel, this.postCodeHTML);\n    //Create the fieldset eleement with its properties\n    this.fieldSet = document.createElement('fieldset');\n    this.fieldSet.className = \"govuk-fieldset\";\n    this.fieldLegend = document.createElement('legend');\n    this.fieldLegend.classList.add(\"govuk-fieldset__legend\", \"govuk-fieldset__legend--l\");\n    this.legendHeader = document.createElement(\"h1\");\n    this.legendHeader.className = \"govuk-fieldset__heading\";\n    this.legendHeader.innerHTML = this.fieldTitle;\n    this.fieldLegend.appendChild(this.legendHeader);\n    this.fieldSet.appendChild(this.fieldLegend);\n    this.controlOptions = {\n      show_country: this.AddressContext.parameters.option_allowcountry.raw,\n      show_buildingName: this.AddressContext.parameters.ShowBuildingName.raw\n    };\n    this.fieldSet.appendChild(this.buildingNameDiv);\n    this.fieldSet.appendChild(adressline1Div);\n    this.fieldSet.appendChild(adressline2Div);\n    this.fieldSet.appendChild(townDiv);\n    this.fieldSet.appendChild(countyDiv);\n    this.fieldSet.appendChild(countryDiv);\n    this.fieldSet.appendChild(postCodeDiv);\n  };\n  AddressFieldSet.prototype.AdressDiv = function (label, input) {\n    var divElementName = document.createElement(\"div\");\n    divElementName.className = \"govuk-form-group\";\n    divElementName.appendChild(label);\n    divElementName.appendChild(input);\n    return divElementName;\n  };\n  AddressFieldSet.prototype.AddressEntry = function (inputElement, elementClassList, elelmentId, elementName, contextval, elementAutoComplete) {\n    inputElement = document.createElement(\"input\");\n    inputElement.type = \"text\";\n    inputElement.value = contextval || \"\";\n    elementClassList.forEach(function (className) {\n      inputElement.classList.add(className);\n    });\n    inputElement.id = elelmentId;\n    inputElement.name = elementName;\n    inputElement.value = contextval || \"\";\n    if (typeof elementAutoComplete !== 'undefined') {\n      inputElement.autocomplete = elementAutoComplete;\n    }\n    return inputElement;\n  };\n  AddressFieldSet.prototype.AddressLabel = function (labelValue, labelName) {\n    var labelClass = \"govuk-label\";\n    var labelElementName = document.createElement(\"label\");\n    labelElementName.className = labelClass;\n    labelElementName.setAttribute(\"for\", labelName);\n    labelElementName.innerHTML = labelValue;\n    return labelElementName;\n  };\n  /**\r\n   * Called when any value in the property bag has changed. This includes field values, data-sets, global values such as container height and width, offline status, control metadata values such as label, visible, etc.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to names defined in the manifest, as well as utility functions\r\n   */\n  AddressFieldSet.prototype.updateView = function (context) {\n    //this.buildingNameDiv = this.AdressDiv(this.buildingNameLabel, this.buildingNameHTML)\n    this.controlOptions = {\n      show_country: context.parameters.option_allowcountry.raw,\n      show_buildingName: context.parameters.ShowBuildingName.raw\n    };\n    //Append all Divs to the fieldset element    \n    if (this.controlOptions.show_buildingName == \"Yes\") {\n      //this.fieldSet.insertBefore(this.buildingNameDiv, this.fieldSet.firstChild);  \n      //this.buildingNameDiv.style.display = 'block'\n      this.buildingNameDiv.style.visibility = 'visible';\n      this.buildingNameDiv.style.height = '70px';\n      // this.fieldSet.insertBefore(this.buildingNameDiv,null)\n    } else {\n      this.buildingNameDiv.style.visibility = 'hidden';\n      this.buildingNameDiv.style.height = '0px';\n      this.fieldSet.insertBefore(this.buildingNameDiv, this.fieldSet.childNodes[1]);\n      //this.buildingNameDiv.remove()\n      //this.buildingNameDiv.style.display = 'none' \n      //this.fieldSet.removeChild(this.buildingNameDiv) ;\n    }\n    this.legendHeader.innerHTML = context.parameters.FieldTitle.raw || \"\";\n    this.addressline1HTML.value = context.parameters.address_line_1.raw || \"\";\n    this.buildingNameHTML.value = context.parameters.BuildingName.raw || \"\";\n    this.addressLine2HTML.value = context.parameters.address_line_2.raw || \"\";\n    this.townHTML.value = context.parameters.town.raw || \"\";\n    this.countyHTML.value = context.parameters.county.raw || \"\";\n    this.countryHTML.value = context.parameters.country.raw || \"\";\n    this.postCodeHTML.value = context.parameters.postcode.raw || \"\";\n    this.AddressOutputChanged();\n  };\n  /**\r\n   * It is called by the framework prior to a control receiving new data.\r\n   * @returns an object based on nomenclature defined in manifest, expecting object[s] for property marked as “bound” or “output”\r\n   */\n  AddressFieldSet.prototype.getOutputs = function () {\n    var BuildHtmlVal = this.buildingNameHTML.value;\n    var line1htmlValue = this.addressline1HTML.value;\n    var addressOutput = {};\n    if (this.AddressContext.parameters.BuildingName.type != null && this.controlOptions.show_buildingName == \"Yes\") addressOutput.BuildingName = BuildHtmlVal;\n    if (this.AddressContext.parameters.address_line_1.type != null) addressOutput.address_line_1 = line1htmlValue;\n    if (this.AddressContext.parameters.address_line_2.type != null) addressOutput.address_line_2 = this.addressLine2HTML.value;\n    if (this.AddressContext.parameters.town.type != null) addressOutput.town = this.townHTML.value;\n    if (this.AddressContext.parameters.county.type != null) addressOutput.county = this.countyHTML.value;\n    if (this.AddressContext.parameters.postcode.type != null) addressOutput.postcode = this.postCodeHTML.value;\n    if (this.AddressContext.parameters.country.type != null) addressOutput.country = this.countryHTML.value;\n    return addressOutput; // {BuildingName: \"this Value\",address_line_1: this.addressline1HTML.value}; \n  };\n  /**\r\n   * Called when the control is to be removed from the DOM tree. Controls should use this call for cleanup.\r\n   * i.e. cancelling any pending remote calls, removing listeners, etc.\r\n   */\n  AddressFieldSet.prototype.destroy = function () {\n    // Add code to cleanup control if necessary\n  };\n  return AddressFieldSet;\n}();\nexports.AddressFieldSet = AddressFieldSet;\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/./AddressFieldSet/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./AddressFieldSet/index.ts"](0, __webpack_exports__);
/******/ 	pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad = __webpack_exports__;
/******/ 	
/******/ })()
;
if (window.ComponentFramework && window.ComponentFramework.registerControl) {
	ComponentFramework.registerControl('Adress.AddressFieldSet', pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.AddressFieldSet);
} else {
	var Adress = Adress || {};
	Adress.AddressFieldSet = pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.AddressFieldSet;
	pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad = undefined;
}